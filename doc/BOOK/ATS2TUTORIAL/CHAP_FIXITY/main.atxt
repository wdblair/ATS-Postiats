%{
//
dynload "libatsdoc/dynloadall.dats"
//
#include "./../ATEXT/ats2tutorial.dats"
//
%}\
#comment("\n\
The file is automatically generated by [atsdoc] from main.atxt.\n\
")
#comment("\n\
Time of Generation: #timestamp()\
")
<chapter id="fixity">
#title("Fixity Declarations")

#para("\

Given a function #emphasis("f"), the standard syntax for applying
#emphasis("f") to an argument #emphasis("v") is #emphasis("f(v)"); for two
arguments #emphasis("v1") and #emphasis("v2"), the syntax is
#emphasis("f(v1, v2)"). Also, it is allowed in ATS to use infix notation
for a binary function application, and prefix/postifix notation for a unary
function application.\

")

#para("\

Each identifier in ATS can be assigned one of the following fixities:
#emphasis("prefix"), #emphasis("infix") and #emphasis("postfix").  The
fixity declarations for many commonly used identifiers can be found in
#myatscodelink("prelude/fixity.ats", "prelude/fixity.ats").  Often, the
name #emphasis("operator") is used to refer to an identifier that is
assigned a fixity. For instance, the following syntax declares that
#dyncode("+") and #dyncode("-") are infix operators of a precedence value
equal to 50:

#atscode("\
infixl 50 + -
")

After this declaration, we can write an expression like #dyncode("1 + 2 -
3"), which is parsed into #dyncode("-(+(1, 2), 3)") in terms of the
standard syntax for function application.\

")#comment("para")

#para("\

The keyword #dyncode("infixl") indicates that the declared infix operators
are left-associative. For right-associative and non-associative infix
operators, please use the keywords #dyncode("infixr") and
#dyncode("infix"), respectively. If the precedence value is omitted in a
fixity declaration, it is assumed to be equal to 0.\

")

#para("\

We can also use the following syntax to declare that #dyncode("iadd"),
#dyncode("fadd"), #dyncode("padd") and #dyncode("uadd") are
left-associative infix operators with a precedence value equal to that of
the operator #dyncode("+"):

#atscode("\
infixl (+) iadd fadd padd uadd
")

This is useful as it is difficult in practice to remember the precedence
values of (a large collection of) declared operators. Sometimes, we may
need to specify that the precedence value of one operator in relation to
that of another one. For instance, the following syntax declares that
#dyncode("opr2") is a left-associative infix operator and its precedence
value is that of #dyncode("opr1") plus 10:

#atscode("\
infixl (opr1 + 10) opr2
")

If the plus sign (+) is changed to the minus sign (-), then the precedence
value of #dyncode("opr2") is that of #dyncode("opr1") minus 10.\

")#comment("para")

#para("\

We can also turn an identifier #dyncode("opr") into a non-associative infix
operator (of precedence value 0) by putting the backslash symbol
(#dyncode("\\\\")) in front of it. For instance, the expression
#dyncode("exp1 \\\\opr exp2") stands for #dyncode("opr (exp1, exp2)"),
where #dyncode("exp1") and #dyncode("exp2") refer to some expressions,
either static or dynamic.\

")

#para("\

The syntax for declaring (unary) prefix and postfix operators are
similar. For instance, the following syntax declares that #dyncode("~") and
#dyncode("?") are prefix and postfix operators of precedence values 61 and 69,
respectively:

#atscode("\
prefix 61 ~
postfix 69 ?
")

As an example, a postfix operator is involved in the following 3-line
program:

#atscode('\
postfix (imul + 10) !!
extern fun !! (x: int): int
implement !! (x) = if x >= 2 then x * (x - 2)!! else 1
')

")#comment("para")

#para("\

For a given occurrence of an operator, we can deprive it of its assigned
fixity status by simply putting the keyword #dyncode("op") in front of
it. For instance #dyncode("1 + 2 - 3") can be writen as #dyncode("op- (op+
(1, 2), 3)").  It is also possible to (permanently) deprive an operator of
its assigned fixity status.  For instance, the following syntax does so to
the operators #dyncode("iadd"), #dyncode("fadd"), #dyncode("padd") and
#dyncode("uadd"):

#atscode('nonfix iadd fadd padd uadd')

Note that #dyncode("nonfix") is a keyword in ATS.

")#comment("para")

#para("\

Lastly, please note that each fixity declaration is only effective within
its own legal scope.

")

</chapter><!--"fixity"-->

#comment(" ****** ****** ")

#comment(" end of [main.atxt] ")

%{
implement main () = fprint_filsub (stdout_ref, "main_atxt.txt")
%}
